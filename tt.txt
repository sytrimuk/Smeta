Министерство образования, науки и молодежной политики Краснодарского края
ГОСУДАРСТВЕННОЕ БЮДЖЕТНОЕ ПРОФЕССИОНАЛЬНОЕ ОБРАЗОВАТЕЛЬНОЕ УЧРЕЖДЕНИЕ КРАСНОДАРСКОГО КРАЯ
«ТУАПСИНСКИЙ ГИДРОМЕТЕОРОЛОГИЧЕСКИЙ ТЕХНИКУМ» 


Допущена к защите: 
Заместитель директора по УР
____________ /И.С. Данилова/ 
«_____» _____________ 2025г. 


Дипломная работа
Тема: Разработка и создание фрагмента информационной системы «Предприятие по производству хозяйственных товаров».
Специальность 09.02.04 Информационные системы (по отраслям)

Выполнил студент:
4 курса, группы 1ИС
Крумян Владимир Русланович 
(Фамилия Имя Отчество)
Руководитель: Зайцев А.В.
Студент: ____________ 
                      			 (подпись) 
Руководитель: ______________ / Зайцев А.В./ (к защите) 
                                     (подпись) 
Работа представлена на заседание ЦМК 
«_____ » _____________ 2025г. 
Председатель ЦМК: _______________ /Зайцев А.В./ 
                                                   (подпись)

Туапсе 2025
СОДЕРЖАНИЕ

ВВЕДЕНИЕ	3
1 ОПИСАНИЕ ПРЕДМЕТНОЙ ОБЛАСТИ	5
1.1 Обзор литературы	5
1.2 Анализ деятельности организации	8
1.3 Постановка задачи проекта	10
2 ВЫБОР ПРОГРАММНЫХ СРЕДСТВ РАЗРАБОТКИ	17
2.1 Выбор средств разработки системы	17
2.2 Выбор фреймворка.	19
2.3 Выбор языка программирования	20
2.4 Выбор СУБД	22
2.5 Требования к структуре и функционированию системы	24
2.6 Требования к информационному обеспечению	25
3 РАЗРАБОТКА ИНФОРМАЦИОННОЙ СИСТЕМЫ	28
3.1 Проектирование базы данных	28
3.2 Описание пользовательского интерфейса	31
3.3 Спецификация модулей программы	35
3.4 Файловая система проекта.	45
ЗАКЛЮЧЕНИЕ	48
СПИСОК ИСПОЛЬЗУЕМЫХ ИСТОЧНИКОВ	50


 
ВВЕДЕНИЕ

Тема дипломной работы: «Разработка и создание фрагмента информационной системы предприятия по производству хозяйственных товаров». Целью данной работы является демонстрация теоретических и практических навыков проектирования и разработки информационных систем, приобретённых в процессе обучения и прохождения производственной и преддипломной практики.
В современном обществе автоматизация является ключевым фактором, определяющим уровень его развития и эффективности. Сегодня электронно-вычислительные машины (ЭВМ) применяются в столь широком спектре сфер, что сложно найти область, где их использование было бы нецелесообразным.
Особое значение современные информационные технологии приобретают для автоматизации складского учета. Задачей данной работы является создание информационной системы «Предприятие по производству хозяйственных товаров», которая станет эффективным инструментом для автоматизации процессов планирования закупок и внутренних операций предприятия. Эта система обеспечит консолидацию и анализ информации о доступных ресурсах и текущих задачах, позволяя вводить данные однократно и использовать их в различных операциях хозяйственной деятельности.
Актуальность темы данной выпускной квалификационной работы обусловлена необходимостью автоматизации учета внутренних процессов предприятия с целью снижения временных и денежных затрат на выполнение рутинных операций.
Цель работы – повысить эффективность работы предприятия по розливу минеральных вод за счет автоматизации внутренних процессов.
Для достижения этой цели в рамках дипломной работы были поставлены следующие задачи:
•	Выбрать методы и средства проектирования и разработки.
•	Составить план информационной системы.
•	Разработать информационную систему.
•	Представить готовый продукт на защите дипломной работы.
Теоретической основой дипломной работы послужила литература в данной области, перечень которой приведён в конце работы.
При выполнении дипломной работы использовались следующие инструменты: текстовый редактор MS Word, поисковая система Yandex, и среда разработки Visual Studio Community 2022.
 
1 ОПИСАНИЕ ПРЕДМЕТНОЙ ОБЛАСТИ

1.1 Характеристика деятельности предприятия

Основные направления работы: производства хозяйственных товаров, электрооборудования для автотранспорта. Предприятие небольшое, относится к категории малого бизнеса.
Миссией компании является производство высококачественной продукции, удовлетворение потребностей клиентов и создание долгосрочных партнерских отношений.
Цели на рынке:
•	захват и укрепление лидерства на рынке в сфере производства и поставки изделий электрооборудования для автотранспорта;
•	увеличение	доли	рынка в сегментах, в которых действует компания;
•	улучшение	узнаваемости бренда и создание положительной репутации на рынке;
•	развитие новых каналов распространения для расширения географии продаж.
Компания ориентирована на следующие сегменты рынка: бизнес-сектор, включая малые, средние и крупные компании, заводы автомобильные. Потребители, заинтересованные в продукции для персонального использования.
Компания производит и предлагает следующую продукцию и услуги: промышленные готовые изделия, комплектующие к ним, а также услуги по сервисному обслуживанию и ремонту готовых изделий.

1.2 Анализ деятельности организации

Главной задачей деятельности предприятия по розливу минеральных вод является использование современных технологий и стандартов качества, чтобы снабдить обширные слои населения качественной и экологически чистой артезианской водой. Миссией организации является донести чистую и живую воду, (т.к. после очистки в ней в действительности содержится кислород) в каждый дом и офис, сделать жизнь более здоровой и комфортной.
Сейчас практически все организации предпочитают использовать бутилированную питьевую воду, а также оборудование для розлива воды: настольные и напольные диспансеры для воды (кулеры), водяные насосы (помпы), удобные держатели для пластиковых стаканов, стеллажи для бутылей все это вследствие того, что водопроводная вода не пригодная для питья. Проект производит доставку емкостей в 19 литров на дом и в офис.

 
Рисунок 1.1 Организационная структура отдела

Организационная структура имеет линейный вид. Это говорит о том, что планирование работ и контроль их выполнения осуществляется от руководителя.
Менеджер непосредственно подчиняется индивидуальному предпринимателю.
Руководитель подразделения доставки бутилированной воды контролирует выполнение всех должностных обязанностей линейного персонала доставки, контролирует регулирование конфликтов с клиентами, заключение новых договоров на поставки бутилированной воды.
Кладовщик занимается контролем и отпуском бутилированной воды на основном складе.
Оператор принимает заявку от клиента на доставку бутилированной воды по телефону, отписывает заказы покупателя, новых клиентов заносит в базу данных, проверяет наличие договора, формирует путевые листы и передает его водителям-экспедиторам.
Водитель-экспедитор получат путевой лист, загружает на основном складе бутилированную воду в автомобиль и осуществляет заказ по указанному адресу в заявке, от клиентов принимает оплату.
В результате проведенных исследований был выявлен специфичный для вида деятельности процесс, который требует усовершенствования и автоматизации. С увеличением числа клиентов появилась необходимость формирования в большом количестве пакетов документов, необходимых для передачи клиенту: счета, товарно-транспортных накладных и документов реализации.

 
1.3 Постановка задачи проекта

Для разработки информационной системы проведен анализ информационных потоков внутри организации, между организацией и внешней средой. Документооборот организации представлен на рисунке 1.2.

 
Рисунок 1.2 Схема документооборота отдела.

Деятельность организации основывается на таких документах, как:
•	правовые акты РФ – правовые и законодательные акты Российской Федерации, регламентирующие деятельность в отрасли;
•	внутренние инструкции организации – основные правила, регламентирующие деятельность внутри компании, обязательны для исполнения всеми сотрудниками организации;
Входной информацией является:
•	информация о сотрудниках проекта - полная карточка сотрудника предприятия;
•	информация о контрагентах – карточка контрагента со всеми реквизитами клиента;
•	информация о товаре – документ, содержащие описание предлагаемого товара;
•	информация о заявке – документ, описывающий все данные о заказе клиента;
•	информация о складах – документ, включающий в себя информацию о складах и их ответственных;
•	реестр поступления денежных средств – реестр от бухгалтерии о поступлении оплаты от клиентов;
•	реестр договоров – реестр, который содержит информацию об уже заключенных договорах;
•	перечень работ, выполняемых сотрудниками – список должностных обязанностей сотрудников, для расчета премиальных выплат;
•	Выходной информацией является:
•	список клиентов – документ содержащий, карточки клиентов;
•	список сотрудников – документ, содержащий информацию о сотрудниках и выполняемые ими должностные обязанности;
•	отчет: работа, выполненная сотрудниками за отчетный период;
•	договор – согласованный и подписанный договор;
•	товарная накладная – документ, содержащий информацию о товаре;
•	отчет о продажах – информация о проданном товаре за определенный период, с возможность отбора по складам;
•	отчет о закупка – выводит информацию о поступлениях товара за определенный период;
•	остатки ТМЦ – информация о остатках и движениях на складе;
•	анализ продаж за период;
•	дебиторская задолженность – информация о просроченной задолженности клиентов;
Предлагаемые функции разрабатываемой информационной системы (Рисунок 1.3):
•	учет информации о контрагентах и сотрудниках;
•	учет работ сотрудников отдела;
•	анализ продаж;

 
Рисунок 1.3 Функциональная модель деятельности.

Ресурсами используемыми являются сотрудники отдела такие, как операторы, менеджер, руководитель отдела.
Основные функции разрабатываемой информационной системы, входная и выходная информация представлены на рисунке 1.3. Далее рассмотрим более подробно функции системы.
Функция «Учет клиентов и сотрудников»
Данная функция служит для учета информации о сотрудниках и контрагентах. В результате получаем список клиентов с возможность выбора отчетного периода и список сотрудников.
Входящая информация:
•	информация о сотрудниках;
•	информация о клиентах; Выходная информация:
•	список клиентов за отчетный период;
•	список сотрудников.
Функция «Учет работ сотрудников отдела»
Данная функция включает в себя этапы:
•	прием заявки;
•	контроль и оформление договоров;
•	формирование отгрузки товара;
•	обработка работ, выполненных сотрудниками (Рисунок 1.4).

 
Рисунок 1.4 Декомпозиция функции: учет работ сотрудников отдела

На этапе приема заявки происходит процесс получения информации о заказе от клиента.
Входящая информация:
•	карточка сотрудника;
•	информация о складах;
•	информация о товаре;
•	заказ от клиента;
•	перечень работ, выполняемых сотрудником. Выходная информация:
•	информация о работах сотрудника;
•	заказ от клиента;
Оператор в результате приема заказа от клиента ищет его в списке клиентов, если клиент отсутствует в списке, то создается новая карточка клиента, далее переходим к следующему этапу.
Этап контроля и формирования договоров содержит в себе 3 процесса: проверка срока и наличие действующего договора, создание нового договора, утверждение договора руководителем отдела (Рисунок 1.5)

 
Рисунок 1.5 Декомпозиция этапа «контроль и оформление договора»

Входящая информация:
•	заявка от клиента;
•	реестр договоров;
•	информация о работах сотрудников. 
Выходная информация:
•	договор;
•	информация о работах сотрудников.
На этом этапе после этапа приема заявки происходит проверка в реестре договоров наличия действующего договора с клиентом, если действующего договора не существует, то переходим к следующему процессу - создание нового договора, далее к процессу подписания договора руководителем отдела, затем переходим к 3 этапу.
Этап формирования отгрузки товара включает в себя 4 процесса: создание счета на оплату; формирование путевого листа; отгрузка заказа клиенту; приход денежных средств в кассу (Рисунок 1.6).

 
Рисунок 1.6 Декомпозиция этапа «Формирование отгрузки товара».

Входящая информация:
•	информация о работах сотрудников;
•	заявка от клиентов;
•	реестр поступления денежных средств. 
Выходная информация:
•	товарная накладная;
•	информация о работах сотрудников;
•	реестр счетов.
На этом этапе происходит формирование счетов на оплату на основание заказа клиента, затем происходит создание путевых листов, далее водитель- экспедитор отгружает товар клиенту и сдает деньги в кассу.
В процессе этапа - обработка работ, выполненных сотрудником, происходит формирование документа, в котором указывается какие должностные обязанности, выполнил каждый сотрудник
Входящая информация:
•	информация о работах сотрудников.
Выходная информация:
•	отчет: работа выполняема сотрудниками за отчетный период.
Функция «Анализ продаж»
Данная функция служит для проведения: анализа прихода товара; анализа продажи товара.
Входящая информация:
•	информация о контрагентах;
•	реестр счетов;
•	информация о работах сотрудников. 
Выходная информация:
•	отчет о продажах;
•	отчет о закупках;
•	остатки ТМЦ.
 
2 ВЫБОР ПРОГРАММНЫХ СРЕДСТВ РАЗРАБОТКИ

2.1 Выбор средств разработки системы

Visual Studio
Visual Studio — это интегрированная среда разработки (Integrated Development Environment, IDE) от компании Microsoft. Она предоставляет широкий набор инструментов и функций для создания различных приложений, включая веб-приложения, мобильные приложения, настольные приложения, а также сервисы и базы данных. Visual Studio поддерживает множество языков программирования и платформ, что делает её универсальным инструментом для разработчиков.
Основные возможности Visual Studio:
1.	Редактирование кода: Visual Studio предоставляет мощный редактор кода с подсветкой синтаксиса, автодополнением, рефакторингом и другими функциями, которые облегчают написание и понимание кода.
2.	Отладка: Инструменты для отладки позволяют разработчикам пошагово выполнять код, устанавливать точки останова, следить за переменными и стеком вызовов, что помогает быстро находить и исправлять ошибки.
3.	Интеграция с системами контроля версий: Visual Studio поддерживает интеграцию с популярными системами контроля версий, такими как Git, SVN и TFS, что позволяет разработчикам эффективно управлять версиями кода и работать в команде.
4.	Управление проектами и решениями: Среда позволяет организовывать проекты в виде решений, что упрощает управление большими проектами и их компонентами.
5.	Инструменты для тестирования: Встроенные инструменты позволяют создавать и запускать тесты, обеспечивая высокое качество разрабатываемого программного обеспечения.
6.	Расширяемость: Visual Studio поддерживает различные плагины и расширения, которые можно установить для добавления новых функций и улучшения рабочего процесса.
7.	Поддержка различных языков программирования: Visual Studio поддерживает такие языки программирования, как C#, C++, Visual Basic .NET, F#, Python, JavaScript, TypeScript и многие другие, что делает её универсальным инструментом для разработчиков.
8.	Интеграция с облачными сервисами: Visual Studio тесно интегрирована с облачными сервисами Azure, что позволяет легко разрабатывать, тестировать и развертывать приложения в облаке.
9.	Инструменты для создания пользовательского интерфейса: Среда предоставляет визуальные редакторы для создания пользовательского интерфейса, что упрощает процесс разработки графических интерфейсов для приложений.
Разновидности Visual Studio:
•	Visual Studio Community: Бесплатная версия для индивидуальных разработчиков, студентов и небольших команд. Предоставляет большинство функций, необходимых для разработки приложений.
•	Visual Studio Professional: Платная версия, предназначенная для профессиональных разработчиков и небольших команд. Включает дополнительные инструменты для командной работы и интеграции с другими продуктами Microsoft.
•	Visual Studio Enterprise: Самая полная версия, предназначенная для крупных организаций и команд. Включает все функции Professional версии, а также дополнительные инструменты для управления жизненным циклом приложений, нагрузочного тестирования и анализа кода.
Visual Studio является мощной и универсальной средой разработки, которая предоставляет все необходимые инструменты для создания, отладки, тестирования и развертывания приложений на различных платформах. Благодаря своим широким возможностям и поддержке множества языков программирования, Visual Studio остается одним из самых популярных инструментов среди разработчиков по всему миру.

	2.2 Выбор фреймворка.

Entity Framework Core
Entity Framework Core (EF Core) — это объектно-реляционный маппер (ORM) с открытым исходным кодом для .NET. Он позволяет разработчикам работать с базами данных, используя .NET объекты, устраняя необходимость написания большинства стандартного кода для взаимодействия с базой данных. EF Core является кроссплатформенным и легковесным ORM, который поддерживает множество баз данных.
Основные возможности EF Core:
1.	Моделирование данных: EF Core позволяет моделировать данные в виде классов .NET, которые представляют таблицы в базе данных. Это упрощает работу с данными, делая её более интуитивной для разработчиков, знакомых с объектно-ориентированным программированием.
2.	Запросы LINQ: Разработчики могут использовать язык интегрированных запросов (LINQ) для взаимодействия с данными, что обеспечивает мощные возможности фильтрации, проекции и агрегирования данных.
3.	Миграции: EF Core поддерживает миграции, которые позволяют легко обновлять схему базы данных при изменении модели данных. Это упрощает управление изменениями в структуре базы данных на протяжении всего жизненного цикла приложения.
4.	Отслеживание изменений: EF Core автоматически отслеживает изменения в данных, загруженных из базы данных, что позволяет легко сохранять изменения обратно в базу данных.
5.	Кэширование: EF Core поддерживает кэширование данных для повышения производительности, что снижает количество запросов к базе данных.
6.	Кроссплатформенность: EF Core работает на различных платформах, включая Windows, macOS и Linux, что делает его удобным для разработки приложений, которые должны работать в разных средах.
7.	Поддержка различных баз данных: EF Core поддерживает множество баз данных, включая SQL Server, SQLite, MySQL, PostgreSQL и другие, что делает его гибким и адаптируемым к различным проектам.
Преимущества использования EF Core.
•	Ускорение разработки: EF Core позволяет разработчикам сосредоточиться на логике приложения, а не на написании стандартного кода для доступа к данным. Это ускоряет процесс разработки и снижает вероятность ошибок.
•	Улучшенная читаемость и поддерживаемость кода: Использование классов для представления данных и LINQ для запросов делает код более читаемым и легким для понимания и поддержки.
•	Гибкость: EF Core предоставляет гибкие возможности для настройки и расширения, что позволяет адаптировать его под конкретные потребности проекта.
•	Сообщество и поддержка: EF Core имеет активное сообщество разработчиков и хорошую документацию, что облегчает решение возникающих вопросов и проблем.

2.3 Выбор языка программирования

C# (произносится как "си-шарп") — это объектно-ориентированный язык программирования общего назначения, разработанный компанией Microsoft. Разработка языка началась в 1998 году и продолжалась до 2001 года под руководством Андерса Хейлсберга и Скотта Вильтаумота. Язык был создан для разработки приложений на платформах Microsoft .NET Framework и .NET Core и впоследствии стандартизирован как ECMA-334 и ISO/IEC 23270.
Особенности C#
C# принадлежит к семейству языков с синтаксисом, подобным C. Его синтаксис наиболее близок к C++ и Java. Основные характеристики C# включают:
•	Статическая типизация: типы данных определяются на этапе компиляции, что позволяет выявлять ошибки до выполнения программы.
•	Полиморфизм: поддержка наследования и виртуальных методов позволяет использовать один интерфейс для различных типов.
•	Перегрузка операторов: возможность определять поведение стандартных операторов (например, +, -, *) для пользовательских типов данных.
•	Делегаты и события: Делегаты позволяют ссылаться на методы, а события обеспечивают мощный механизм обработки событий.
•	Свойства и переменные: удобный синтаксис для определения свойств, которые управляют доступом к данным объекта.
•	Обобщённые типы и методы: позволяют создавать универсальные классы и методы, работающие с любыми типами данных.
•	Итераторы и анонимные функции: итераторы упрощают создание последовательностей данных, а анонимные функции и замыкания обеспечивают удобные возможности для работы с функциями.
•	LINQ (Language Integrated Query): позволяет выполнять запросы к коллекциям данных непосредственно из кода C#.
•	Исключения: Механизм обработки ошибок и исключений.
•	Комментарии в формате XML: позволяют документировать код, используя XML.
Влияние предшественников и отличия
C# заимствовал множество концепций из других языков программирования, таких как C++, Delphi, Modula, Smalltalk и особенно Java. Однако C# также исключает некоторые модели, которые были признаны проблематичными в других языках. Например, в отличие от C++, C# не поддерживает множественное наследование классов, что снижает сложность и вероятность ошибок. При этом C# поддерживает множественную реализацию интерфейсов, что позволяет использовать преимущества интерфейсного программирования.
C# был разработан как язык прикладного уровня для Common Language Runtime (CLR). Множество возможностей C# зависят от возможностей CLR, включая систему типов, которая отражает базовую библиотеку классов (BCL). Возможности языка C# развиваются вместе с развитием CLR. Например, с переходом от версии CLR 1.1 к 2.0, язык C# обогатился новыми функциями. Однако с выходом C# 3.0 появились расширения, которые не зависят от обновлений платформы .NET, что нарушило эту закономерность.
CLR предоставляет C#, как и другим языкам, ориентированным на .NET, множество возможностей, которые отсутствуют в традиционных языках программирования. Например, сборка мусора (garbage collection) не реализована в самом C#, а производится CLR. Это позволяет автоматизировать управление памятью, снижая вероятность утечек памяти и ошибок, связанных с неправильным управлением ресурсами. Такой подход аналогичен для других .NET-языков, таких как VB.NET и J#.
C# — это мощный и гибкий язык программирования, который продолжает развиваться и адаптироваться к современным требованиям разработки программного обеспечения. Благодаря богатому набору функций и тесной интеграции с платформой .NET, C# остается популярным выбором для разработчиков, создающих приложения различного уровня сложности и назначения.

2.4 Выбор СУБД

SQLite — компактная встроенная система управления базами данных (СУБД), исходный код которой открыт для всех. В 2005 году проект получил награду Google-O’Reilly Open Source Award.
Основные особенности:
1.	Встроенная СУБД: SQLite не использует парадигму клиент-сервер. Вместо этого, движок SQLite встроен в приложение в виде библиотеки, что снижает накладные расходы и улучшает время отклика.
2.	Файловая структура: Вся база данных хранится в одном файле на компьютере, где работает программа. Это включает определения, таблицы, индексы и данные.
3.	Транзакции и блокировки: перед записью в базу данных SQLite блокирует весь файл, обеспечивая функции ACID (атомарность, согласованность, изолированность, долговечность) за счет использования журнала транзакций.
4.	Многопоточность: Одновременное чтение из базы данных возможно для нескольких процессов или потоков. Запись возможна только при отсутствии других активных запросов, иначе попытка записи повторяется или возвращает код ошибки.
Клиентская утилита.
SQLite включает функциональную клиентскую утилиту sqlite3, которая является кроссплатформенной командной строкой и демонстрирует возможности библиотеки.
Применение.
SQLite используется как в встраиваемых системах, так и на серверах с большими объемами данных.
Типы данных: поддерживаются INTEGER, REAL, TEXT, BLOB и специальное значение NULL. Размеры TEXT и BLOB ограничены лишь константой SQLITE_MAX_LENGTH (1 миллиард).
Динамическая типизация: Каждое значение в любом поле может быть любого типа, независимо от типа, указанного при создании таблицы. SQLite использует подход "type affinity" для неявных преобразований типов на основе имен.
Ранние версии SQLite работали с 32-разрядными целыми числами и без ограничений на размеры базы данных, что приводило к проблемам в экстремальных условиях. Новые версии включают предельные значения, которые тщательно тестируются.
SQLite остаётся популярной СУБД благодаря своей простоте, гибкости и широким возможностям для различных приложений.

2.5 Требования к структуре и функционированию системы

В проекте целесообразно использовать локальную базу данных, что позволит уменьшить время работы с базой данных и уменьшить сложность настройки прикладного программного обеспечения.
Предполагаются следующие информационные решения, касающиеся разрабатываемого программного средства:
•	ввод информации в базу данных осуществляется вручную с бумажных носителей. Информация записывается в базу автоматически;
•	обработка данных осуществляется в диалоговом режиме;
•	пользователь получает информацию из базы данных на экран ПЭВМ.
Требования к входным и выходным данным
Для уменьшения ошибок при вводе информации в ПЭВМ в необходимых полях базы данных следует задать условия на значение. В самом простом случае условие на значение должно гарантировать, что из-за ошибки ввода в числовом поле не окажутся буквенные символы. Другие условия могут определять область или диапазоны допустимых значений. Заданное условие на значение всегда будет проверяться при вводе или изменения значения поля в таблице.
Входными данными для системы должны быть отчеты и документы.
Требования к численности и квалификации персонала системы и режиму его работы
Выполнение работ по администрированию и сопровождению системы не должно требовать увеличения численности служб и персонала. Численность пользователей системы должно определять руководство Заказчика, исходя из требований выполнения ими бизнес-функций.
Предполагается произвольный режим работы пользователя системы.
Требования к надежности.
При функционировании системы должен осуществляться контроль входной и выходной информации, в том числе данных вводимых пользователем и данных, содержащихся в таблицах баз данных.
В случае ошибки ввода-вывода должны выдаваться соответствующие сообщения и предоставляться возможность исправления ошибок и продолжения работы.
При выполнении операций по изменению или удалению данных необходимо обеспечить целостность БД. Для операций удаления необходимо предусмотреть возможность отмены.
Требования к эргономике.
Интерфейс ИС «Предприятие по производству хозяйственных товаров» должен быть разработан в соответствии с основными принципами разработки любого оконного приложения ОС Windows.
Требования к функциям (задачам), выполняемым системой Система должна выполнять следующие функции:
•	формирование списка сотрудников;
•	учет товародвижения;
•	учет ассортимента;
•	формирование выходные документов и отчетов;

2.6 Требования к информационному обеспечению

Детальный состав данных системы должен быть определен на этапе проектирования системы.
Структура объектов, их атрибуты и взаимосвязи должны определяться моделью данных ИС «Предприятие по производству хозяйственных товаров», разрабатываемой на стадии проектирования системы.
Система должна иметь локальную архитектуру.
Для защиты данных от разрушений при авариях и сбоях в электропитании и аппаратуры должно осуществляться резервное копирование данных ИС «Предприятие по производству хозяйственных товаров».
Требования к лингвистическому обеспечению
Для реализации бизнес-логики предметной области при разработке используется язык высокого уровня С# в среде Visul Studio Communiti 2022 на Microsoft.Entity Framework Core, обеспечивающей решение всех задач по реализации функций системы, в том числе и подготовки отчётов.
Для манипулирования объектами и ввода-вывода данных используется язык SQL.
Требования к программному обеспечению
Для обеспечения работоспособности ИС «Предприятие по розливу минеральных вод» используются следующие программные средства:
•	Microsoft Data SQLite Components v.5.0.3;
•	операционная система MS Windows 7/10;
•	MS Office 2019.
Требования к техническому обеспечению.
Минимальные аппаратные требования к рабочей станции: рекомендуется компьютер, оснащенный процессором Intel
Pentium/Celeron, AMD K6/Athlon/Duron или совместимым с частотой 300 МГц или более (одно- или двухпроцессорная система). Минимальная частота процессора - 233 МГц.
Рекомендуется 512 МБ ОЗУ или более. Минимально допустимый объем
- 64 МБ (при наличии 64 МБ ОЗУ возможно снижение производительности).
жесткий диск объемом 10 Гбайт, с объемом свободного пространства не менее 1 Гбайт;
Монитор и видеоадаптер Super VGA с разрешением 800 X 600 или более высоким.
Клавиатура и мышь или совместимое указывающее устройство

 
3 РАЗРАБОТКА ИНФОРМАЦИОННОЙ СИСТЕМЫ

3.1 Проектирование базы данных

Методология проектирования предусматривает разбиение всего процесса на несколько стадий, каждая из которых, в свою очередь, состоит из нескольких этапов. На каждом этапу разработчику предлагается набор технических приемов, позволяющих решать задачи, стоящие перед ним на данной стадии разработки.
В предлагаемой методологии весь процесс проектирования базы данных подразделяется на три этапа:
•	концептуальное проектирование.
•	логическое проектирование.
•	физическое проектирование.
Концептуальное проектирование.
Первый этап процесса проектирования базы данных называется концептуальным проектированием. Он заключается в создании концептуальной модели данных для анализируемой части предприятия. Эта модель данных создается на основе информации, записанной в спецификациях требований пользователей. Концептуальное проектирование базы данных абсолютно не зависит от таких подробностей ее реализации, как тип выбранной целевой СУБД, набор создаваемых прикладных программ, используемые языки программирования, тип выбранной вычислительной платформы, а также от любых других особенностей физической реализации. Концептуальная модель данных предприятия является источником информации для этапа логического проектирования базы данных.
Логическое проектирование.
Второй этап проектирования базы данных называется логическим проектированием базы данных. Его цель состоит в создании логической модели данных для исследуемой части предприятия. Концептуальная модель данных, созданная на предыдущем этапе, уточняется и преобразуется в логическую модель данных. Логическая модель данных учитывает особенности выбранной модели организации данных в целевой СУБД. Если концептуальная модель данных не зависит от любых физических аспектов реализации, то логическая модель данных создается на основе выбранной модели организации данных целевой СУБД.
Инфологическая модель данных по методологии проектирования IDEF1X изображена на рисунке 3.1.

 
Рисунок 3.1 Схема данных

Физическое проектирование
Физическое проектирование является третьим и последним этапом создания проекта базы данных, при выполнении которого проектировщик принимает решения о способах реализации разрабатываемой БД. Приступая к физическому проектированию БД, необходимость конкретную целевую СУБД. Основной целью физического проектирования БД является описание способа физической реализации логического проекта БД. В случае реляционной модели БД под этим подразумевается следующее:
•	Создание набора реляционных таблиц и ограничений для них на основе информации, представленной в глобальной логической модели данных;
•	Определение конкретных структур хранения данных и методов доступа к ним, обеспечивающих оптимальную производительность СУБД;
Разработанная модель находится в 3-й нормальной форме, так как:
•	атрибуты сущностей являются атомарными;
•	каждый неключевой атрибут функционально полно зависит от первичного ключа;
•	в модели отсутствуют транзитивные зависимости неключевых атрибутов от ключа.
Этап физического проектирования базы данных предусматривает принятие разработчиком окончательного решения о способах реализации создаваемой базы. Поэтому физическое проектирование обязательно производится с учетом всех особенностей выбранной СУБД.
В качестве СУБД выбран SQLite.
Код навигации данных:
<?xml version="1.0" encoding="utf-8"?>
<ClassDiagram MajorVersion="1" MinorVersion="1" MembersFormat="NameAndType">
  <Class Name="WpfApp1.DB.Models.UserModel">
    <Position X="0.5" Y="0.5" Width="2.25" />
    <TypeIdentifier>
      <HashCode>AAACAAAAAAACAAAEACAAAAAAAAAAAAACAAAQAAAAAAA=</HashCode>
      <FileName>DB\Models\UserModel.cs</FileName>
    </TypeIdentifier>
  </Class>
  <Class Name="WpfApp1.DB.Models.SalesmanModel">
    <Position X="3.25" Y="0.5" Width="2.25" />
    <TypeIdentifier>
      <HashCode>AAACAAAAAAACAAAEACAAAAAAAAAAAAACAAAQAAAAAAA=</HashCode>
      <FileName>DB\Models\SalesmanModel.cs</FileName>
    </TypeIdentifier>
  </Class>
  <Class Name="WpfApp1.DB.Models.StockModel">
    <Position X="3.25" Y="3.75" Width="2.25" />
    <TypeIdentifier>
      <HashCode>EAACAAAAAQAAAAAAACAAAAQAAAAAAAAAAAAAAAAAAAA=</HashCode>
      <FileName>DB\Models\StockModel.cs</FileName>
    </TypeIdentifier>
  </Class>
  <Class Name="WpfApp1.DB.Models.ProductModel">
    <Position X="0.5" Y="3.75" Width="2.25" />
    <TypeIdentifier>
      <HashCode>AAACQBAAAQAgAAAAACAABAQAgAAAAAACAAAAAAAIAAA=</HashCode>
      <FileName>DB\Models\ProductModel.cs</FileName>
    </TypeIdentifier>
  </Class>
  <Class Name="WpfApp1.DB.Models.SaleModel">
    <Position X="6" Y="3.75" Width="2.25" />
    <TypeIdentifier>
      <HashCode>EAACAAAAAQAAAAAAACAAAAQAAAAAAAAAAAAAAAAAAAA=</HashCode>
      <FileName>DB\Models\SaleModel.cs</FileName>
    </TypeIdentifier>
  </Class>
  <Font Name="Segoe UI" Size="9" />
</ClassDiagram>

3.2 Описание пользовательского интерфейса

Создание пользовательского интерфейса.
При создании пользовательского интерфейса использовались возможности среды разработки Visual Studio Community. Эта среда позволяет значительно упростить процесс программирования общих компонентов Windows, таких как метки, пиктограммы и диалоговые панели. Например, диалоговые панели для выбора и сохранения файлов (Choose File и Save File) встроены в Visual Studio Community и могут быть адаптированы под конкретные задачи приложения, обеспечивая необходимую функциональность без написания дополнительного кода.
Преимущества визуального программирования.
Без использования визуального программирования, разработка пользовательского интерфейса требует написания кода для создания и настройки объектов интерфейса. Это означает, что результат можно увидеть только при выполнении программы, что делает процесс настройки внешнего вида и поведения объектов трудоемким и требует многократных правок и запусков программы.
Визуальные средства разработки, предоставляемые Visual Studio Community, позволяют работать с объектами интерфейса в режиме реального времени. Это дает возможность сразу видеть, как объекты будут выглядеть и вести себя во время выполнения программы, что значительно упрощает и ускоряет процесс разработки. Все изменения отображаются моментально, устраняя необходимость многократных ручных операций, характерных для среды без визуальных средств.
Работа с объектами в Visual Studio Community.
Когда объект помещается на форму в среде визуального программирования, его атрибуты автоматически отображаются в виде кода. Этот код соответствует объекту и исполняется в ходе работы программы. Такое тесное взаимодействие между объектами и кодом обеспечивает высокую производительность, поскольку код компилируется, а не интерпретируется во время выполнения.
Таким образом, процесс создания пользовательского интерфейса в Visual Studio Community становится более интуитивным и эффективным. Разработчики могут быстро и легко настраивать компоненты интерфейса, видеть результаты своих изменений в реальном времени и экономить время на разработке, избегая множества рутинных операций.
Взаимодействие с пользователем осуществляется посредством экранных форм. В верхней части приложения находится кнопочная форма для отображения данных, введенных в таблицу ранее (Рисунок 3.2).

 
Рисунок 3.2 Форма «Продукция»

В правой части приложения находится кнопочная форма для внесения в таблицы новых данных (Рисунок 3.3).

 
Рисунок 3.3 Форма «Склад»

Алгоритмы работы программы являются стандартными алгоритмами работы с базой данных. В основном все алгоритмы работы связаны с вводом данных от пользователя, проверке введенной информации на предмет нарушения целостности данных и занесение введенной информации в саму базу, если введенные сведения не нарушают целостности.
В данной системе предусмотрен процесс Авторизации. После ввода пароля пользователь входит в систему и получает права доступа в зависимости от данных ему прав. Права могут быть изменены администратором системы.
Пример окна входа в систему представлено на рисунке 3.4.

 
Рисунок 3.4 Главная форма

Демонстрация главной формы с полными правами, назначенными пользователю продемонстрирована так же на рисунке 3.4.
Демонстрация формы с выведением на экран ошибки при попытке внести некорректные данные в базу (Рисунок 3.5).

 
Рисунок 3.5 Форма ошибки.

 
3.3 Спецификация модулей программы

Программный продукт состоит из 12 программных модулей, обеспечивающих выполнение необходимых функций.
Программный модуль ClientManager может выполнять различные функции в зависимости от контекста и специфики приложения, но общие задачи такого модуля обычно включают управление клиентами и их данными в системе. Вот основные функции, за которые может отвечать модуль ClientManager.
Управление клиентскими данными:
•	Создание, чтение, обновление и удаление (CRUD) клиентов: Обеспечение операций по добавлению новых клиентов, чтению их данных, обновлению информации и удалению клиентов из системы.
•	Хранение информации: Поддержка и управление базой данных клиентов, включая контактные данные, историю взаимодействий и предпочтения клиентов.
Аутентификация и авторизация:
•	Управление учетными записями клиентов: Регистрация новых пользователей, управление логином и паролем, восстановление пароля и контроль доступа.
•	Роли и права доступа: Назначение ролей клиентам и управление их правами доступа к различным функциям и данным системы.
Обработка запросов клиентов:
•	Обслуживание запросов: Обработка запросов на получение информации, изменение данных или выполнение определенных операций от имени клиентов.
•	Интерфейс взаимодействия: Предоставление API или интерфейсов для взаимодействия с другими частями системы или внешними сервисами.
Взаимодействие с другими модулями:
•	Интеграция: Взаимодействие с другими модулями системы, такими как BillingManager для управления счетами, OrderManager для управления заказами и NotificationManager для отправки уведомлений клиентам.
•	Обмен данными: Синхронизация и обмен данными с другими компонентами системы для обеспечения целостности и актуальности информации.
Мониторинг и отчетность:
•	Аналитика и отчеты: Сбор и анализ данных о клиентах, создание отчетов и предоставление аналитической информации для принятия бизнес-решений.
•	Мониторинг активности: Отслеживание активности клиентов, выявление аномалий и потенциальных угроз безопасности.
Программный модуль ClientManager играет ключевую роль в управлении взаимоотношениями с клиентами и обеспечивает необходимый функционал для работы с клиентскими данными, аутентификацией, авторизацией и взаимодействием с другими модулями системы.
Модуль ProductManager отвечает за управление информацией о продуктах в системе. Он играет ключевую роль в обеспечении актуальности и доступности данных о продуктах для других частей системы, таких как модули управления заказами, клиентами и отчетности. Вот основные функции, за которые может отвечать модуль ProductManager.
Основные функции модуля ProductManager.
Управление данными о продуктах:
•	CRUD-операции: Создание, чтение, обновление и удаление информации о продуктах. Это включает добавление новых продуктов, редактирование существующих данных и удаление устаревших или нерелевантных продуктов.
•	Хранение информации: Поддержка базы данных продуктов, включая описание, цены, наличие на складе, изображения, категории и атрибуты продуктов.
Каталогизация и классификация:
•	Категории и подкатегории: Организация продуктов в категории и подкатегории для удобства поиска и навигации.
•	Теги и атрибуты: Назначение тегов и атрибутов (например, цвет, размер, материал) для облегчения фильтрации и сортировки продуктов.
Инвентаризация:
•	Учет запасов: Отслеживание наличия продуктов на складе, управление уровнями запасов и автоматизация уведомлений о необходимости пополнения запасов.
•	Интеграция с системой управления складом: Обмен данными с системой управления складом для синхронизации уровня запасов и управления логистикой.
Взаимодействие с другими модулями:
•	Интеграция с модулем заказов (OrderManager): Обеспечение актуальной информации о продуктах для оформления заказов и проверки наличия товаров.
•	Интеграция с клиентским интерфейсом: Представление данных о продуктах на сайте или в приложении, включая фильтрацию, поиск и сортировку.
•	Обмен данными с аналитическими модулями: Предоставление данных о продуктах для генерации отчетов и анализа продаж.
Поддержка многоканальной торговли:
•	Интеграция с внешними платформами: Синхронизация данных о продуктах с маркетплейсами, партнерскими сайтами и другими каналами сбыта.
•	Обеспечение консистентности данных: Поддержка актуальности и согласованности данных о продуктах на всех каналах продаж.
Модуль ProductManager является критически важным компонентом системы управления, обеспечивая эффективное управление данными о продуктах и их интеграцию с другими частями системы. Это позволяет поддерживать актуальность информации, оптимизировать запасы, управлять ценообразованием и обеспечивать лучший пользовательский опыт.
Модуль SaleManager отвечает за управление процессами продаж в системе. Он играет важную роль в обеспечении эффективного ведения продаж, обработки заказов и управления скидками и акциями. Вот основные функции, за которые может отвечать модуль SaleManager.
Основные функции модуля SaleManager.
Управление заказами:
•	Обработка заказов: Создание, обновление и отслеживание статуса заказов от момента их оформления до завершения.
•	Управление платежами: Обработка платежей, управление статусами оплат и интеграция с платежными шлюзами.
•	Формирование счетов и накладных: Автоматическое создание счетов и накладных на основании заказов.
Управление клиентами:
•	Взаимодействие с клиентами: Обработка запросов клиентов, связанных с заказами, включая изменение или отмену заказа.
•	История покупок: Ведение истории покупок клиентов для предоставления персонализированных предложений и улучшения клиентского опыта.
Управление скидками и акциями:
•	Настройка скидок: Создание и управление скидками на отдельные продукты, категории или общую сумму заказа.
•	Акции и промокоды: Организация и управление временными акциями, специальными предложениями и промокодами.
Интеграция с другими модулями:
•	Взаимодействие с ProductManager: Получение актуальной информации о продуктах, таких как цена, наличие на складе и описания, для корректного отображения в заказах.
•	Синхронизация с InventoryManager: Обновление данных о наличии товаров на складе в реальном времени при оформлении и обработке заказов.
•	Интеграция с модулями отчетности и аналитики: Передача данных о продажах для генерации отчетов и анализа производительности.
Обработка возвратов и обменов:
•	Управление возвратами: Обработка запросов на возврат товаров, управление статусами возвратов и интеграция с системой учета запасов.
•	Обмен товаров: Обработка запросов на обмен товаров, управление процессами обмена и обновление информации о заказах.
Аналитика и отчетность:
•	Отчеты по продажам: Создание отчетов о продажах, включая объемы продаж, популярные товары и финансовые показатели.
•	Анализ производительности: Анализ данных для выявления трендов, оценки эффективности акций и скидок, а также принятия стратегических решений.
Модуль SaleManager является ключевым компонентом системы управления продажами, обеспечивая эффективное управление процессами от оформления заказов до анализа продаж. Он интегрируется с другими модулями для обеспечения актуальности данных, улучшения клиентского опыта и оптимизации бизнес-процессов.
Модуль UserManager отвечает за управление пользователями в системе. Он играет ключевую роль в обеспечении безопасности, аутентификации и авторизации пользователей, а также в управлении учетными записями и предоставлении персонализированного опыта. Вот основные функции, за которые может отвечать модуль UserManager.
Основные функции модуля UserManager.
Аутентификация и авторизация:
•	Аутентификация пользователей: Управление процессом входа в систему, проверка учетных данных и поддержка различных методов аутентификации (например, пароли, двухфакторная аутентификация, OAuth).
•	Авторизация: Управление правами доступа пользователей к различным ресурсам и функциям системы на основе ролей и привилегий.
Управление учетными записями:
•	Регистрация пользователей: Обработка создания новых учетных записей, сбор и валидация информации при регистрации.
•	Управление профилем: Обеспечение возможности редактирования личных данных, таких как имя, адрес электронной почты, телефон и другие контактные данные.
•	Сброс пароля и восстановление доступа: Поддержка процессов сброса пароля, включая отправку писем для восстановления доступа.
Управление ролями и правами доступа:
•	Назначение ролей: Определение и управление ролями пользователей (например, администратор, редактор, пользователь) и их привилегиями.
•	Настройка прав доступа: Установка и контроль прав доступа к различным функциям и данным системы на основе ролей.
Безопасность:
•	Защита данных: Шифрование чувствительных данных, таких как пароли, и обеспечение соблюдения лучших практик безопасности.
•	Мониторинг активности: Отслеживание и логирование действий пользователей для выявления подозрительной активности и предотвращения угроз безопасности.
Персонализация:
•	Настройки пользователя: Управление индивидуальными настройками пользователей, такими как предпочтения интерфейса и уведомлений.
•	Персонализированный контент: Предоставление персонализированного опыта на основе поведения и предпочтений пользователя.
Интеграция с другими модулями:
•	Взаимодействие с модулем ClientManager: Интеграция для синхронизации данных клиентов и пользователей, если они различаются в системе.
•	Интеграция с аналитическими модулями: Передача данных о пользователях для генерации отчетов и анализа активности.
Модуль UserManager является ключевым компонентом любой системы, требующей управления пользователями. Он обеспечивает безопасность, аутентификацию и авторизацию, а также управление учетными записями и персонализацией пользовательского опыта. Этот модуль интегрируется с другими частями системы, обеспечивая целостность данных и улучшая общую функциональность.
Модуль WorkerManager отвечает за управление информацией о сотрудниках и их задачами в системе. Он играет важную роль в администрировании персонала, управлении рабочими процессами и обеспечении эффективного взаимодействия между сотрудниками. Вот основные функции, за которые может отвечать модуль WorkerManager.
Основные функции модуля WorkerManager.
Управление информацией о сотрудниках:
•	Учетные записи сотрудников: Создание и управление учетными записями сотрудников, включая личные данные, контактную информацию и должностные обязанности.
•	Хранение данных: Поддержка базы данных сотрудников, включая историю работы, навыки, сертификаты и достижения.
Управление задачами и расписанием:
•	Назначение задач: Распределение задач и поручений среди сотрудников, отслеживание их выполнения.
•	Планирование работы: Создание и управление расписанием работы, включая смены, отпуска и выходные дни.
•	Мониторинг выполнения: Отслеживание статуса задач и времени их выполнения, а также обеспечение обратной связи.
Аутентификация и авторизация:
•	Управление доступом: Назначение прав доступа к различным системам и ресурсам на основе ролей и обязанностей сотрудников.
Обучение и развитие:
•	Управление обучением: Организация обучения и курсов для повышения квалификации сотрудников, отслеживание прогресса и сертификации.
•	Оценка производительности: Проведение оценок производительности, сбор обратной связи и проведение аттестаций.
Взаимодействие и коммуникация:
•	Инструменты коммуникации: Обеспечение средствами внутренней коммуникации, такими как чаты, форумы и доски объявлений.
•	Совместная работа: Поддержка инструментов для совместной работы над проектами и задачами, включая совместное редактирование документов и управление проектами.
Модуль WorkerManager является критически важным компонентом системы управления персоналом и рабочими процессами. Он обеспечивает эффективное управление сотрудниками, распределение задач, планирование рабочего времени и поддержание высокой производительности команды. Благодаря интеграции с другими модулями система становится более гибкой и функциональной, что улучшает общую эффективность и производительность компании.
Программный модуль Manager отвечает за управление данными в приложении или системе. Он может выполнять различные задачи, такие как чтение, запись, обновление и удаление данных из базы данных или других источников данных. Manager обычно обеспечивает абстракцию над сложными операциями с данными, что позволяет другим частям приложения взаимодействовать с данными без необходимости знать детали их хранения и обработки. Этот модуль может также включать в себя логику для проверки данных, управления транзакциями и другие функции, связанные с обработкой данных.
Код модуля Manager:
using WpfApp1.DB.ModelManager;
using WpfApp1.DB.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using WpfApp1.DB.ModelManager;
using WpfApp1.DB.Models;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;

namespace WpfApp1.DB
{
    public class Manager
    {
        private static Manager instance;
        private Context dbContext;

        public UserManager User { get; private set; }
        public SalesmanManager Salesman { get; private set; }
        public ProductManager Product { get; private set; }
        public StockManager Stock { get; private set; }
        public SaleManager Sale { get; private set; }

        private Manager() => InitializeDatabase();

        private void InitializeDatabase()
        {
            dbContext = new Context();
            if (!dbContext.Database.CanConnect())
            {
                dbContext.Database.EnsureCreated();
            }

            User = new UserManager(dbContext);
            Salesman = new SalesmanManager(dbContext);
            Product = new ProductManager(dbContext);
            Stock = new StockManager(dbContext);
            Sale = new SaleManager(dbContext);
        }

        public static Manager Instance
        {
            get
            {
                instance ??= new Manager();
                return instance;
            }
        }
    }
}

Модуль Context отвечает за управление контекстом приложения. Он обеспечивает доступ к глобальным ресурсам и настройкам приложения, таким как конфигурационные параметры, локализация, аутентификация, сессии пользователей и другие аспекты, которые могут быть общими для всего приложения.
Обычно модуль Context предоставляет единый доступ к этим ресурсам и предоставляет интерфейс для работы с ними из различных частей приложения. Это помогает избежать повторения кода и упрощает разработку, поскольку различные компоненты приложения могут использовать общий контекст.
Код модуля:
using WpfApp1.DB.Models;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using WpfApp1.DB.Models;

namespace WpfApp1.DB
{
    public class Context : DbContext
    {
        public DbSet<UserModel> Users { get; set; } = null!;
        public DbSet<SalesmanModel> Salesmans { get; set; } = null!;
        public DbSet<ProductModel> Products { get; set; } = null!;
        public DbSet<StockModel> Stocks { get; set; } = null!;
        public DbSet<SaleModel> Sales { get; set; } = null!;

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlite("Data Source=local.db");
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {

        }

    }
}
Кроме того, модуль Context может также обеспечивать безопасность и управление разрешениями, контролировать жизненный цикл приложения и обеспечивать его стабильную работу в различных сценариях использования.

3.4 Файловая система проекта.

На рисунке 3.8 представлена файловая система проекта

 
Рисунок 3.8 Файловая система проекта

Функциональное описание элементов проекта папки:
Enums
Перечисления (enums): в этой папке хранятся различные перечисления, используемые в проекте.
•	FrameEnum: этот скрипт отвечает за определение и управление различными кадрами (окнами) в приложении. Он содержит список возможных кадров, которые могут быть отображены.
•	TimeOfDayEnum: этот скрипт связан с временными интервалами дня. Он может использоваться для управления различными функциональными аспектами приложения в зависимости от времени суток.
Frame: в этой папке содержатся окна и их функциональные возможности, которые отображаются в приложении. Каждый кадр представляет собой отдельное окно с определённым набором функций и интерфейсом для взаимодействия с пользователем.
Interface: основное предназначение этой папки — обработка колбеков (callback).
•	Пример использования: В главном окне (mainWindow) открываются различные кадры (фреймы). Колбеки передаются этим фреймам для управления главным окном, например, для смены текущего кадра.
DB
DB (Database): в этой папке хранятся модели данных, которые взаимодействуют с базой данных. Это промежуточный слой между базой данных и программой.
Функционал:
•	При получении данных из базы данных (например, SELECT * FROM user WHERE id=1), этот слой автоматически парсит ответ и заполняет соответствующие классы.
•	Использование entity позволяет автоматически преобразовывать запросы к базе данных в SQL и заполнять объекты данными. Например, db.user.first преобразуется в SQL-запрос и возвращает объект User, который содержит все поля из базы данных. Доступ к переменным этого класса осуществляется напрямую, например, int index = user.id.
Util: в этой папке содержатся вспомогательные утилиты для работы приложения.
AppUtils:
Здесь переопределён класс DbContext, взятый из entity. Объявлены переменные, такие как Users, Assortments и другие, для удобного к ним доступа.
В методе конфигурации (OnConfiguring) настраивается база данных, указывая используемый драйвер (например, Sqlite) и ссылку на него.
Validate: здесь описаны методы для валидации данных. В текущей реализации они проверяют вводимые данные на пустоту.
Валидацию можно расширить, например, добавив требование к паролю (не менее 8 символов, с заглавными и строчными буквами).
Прописан парсер для преобразования строк в числа (string в int).
Включён простой шифратор паролей: пароли хранятся в базе данных в виде хешей (MD5 от "логин:пароль"), что обеспечивает безопасность при хранении и передаче паролей.
 
ЗАКЛЮЧЕНИЕ

В ходе выполнения дипломной работы была разработана информационная система для предприятия по розливу минеральной воды. Эта система предназначена для автоматизации внутренних процессов предприятия, что включает планирование закупок, управление складскими запасами и анализ доступных ресурсов. Разработанная система значительно улучшает эффективность предприятия, сокращая временные и денежные затраты на выполнение рутинных операций.
Актуальность данной работы подчеркивается растущей потребностью в автоматизации и оптимизации бизнес-процессов в условиях конкурентного рынка. Современные предприятия стремятся к повышению производительности и снижению издержек, что невозможно без внедрения передовых информационных технологий. Автоматизация позволяет предприятиям адаптироваться к быстро меняющимся условиям рынка, улучшая качество управления и принятия решений.
В условиях цифровизации экономики информационные системы становятся неотъемлемой частью успешного ведения бизнеса. Предприятие по розливу минеральной воды, оснащенное современной информационной системой, получает ряд преимуществ: от повышения точности учета и планирования до улучшения управления ресурсами и взаимодействия с поставщиками. Всё это способствует укреплению позиции предприятия на рынке и повышению его конкурентоспособности.
В процессе выполнения работы были достигнуты все поставленные цели и решены следующие задачи:
•	Выбор методов и средств проектирования и разработки.
•	Составление плана информационной системы.
•	Разработка и внедрение информационной системы.
•	Успешная презентация готового продукта на защите диплома.
Реализованная информационная система может быть эффективна в условиях реального производства, что подтверждает высокую значимость и актуальность выполненной работы. Она может быть адаптирована и внедрена на предприятиях, занимающихся розливом минеральной воды или схожими видами деятельности, что подчеркивает её универсальность и потенциальную пользу для отрасли в целом.
 
СПИСОК ИСПОЛЬЗУЕМЫХ ИСТОЧНИКОВ

1.	Адам, Фримен ASP.NET 4.5 с примерами на C# 5.0 для профессионалов / Фримен Адам. - М.: Диалектика / Вильямс, 2021. - 2792 c.
2.	Албахари, Джозеф C# 3.0. Справочник / Джозеф Албахари, Бен Албахари. - М.: БХВ-Петербург, 2021. - 944 c.
3.	Биллиг, В. А. Основы программирования на С# / В.А. Биллиг. - М.: Интернет-университет информационных технологий, Бином. Лаборатория знаний, 2021. - 488 c.
4.	Вагнер, Билл С# Эффективное программирование / Билл Вагнер. - М.: ЛОРИ, 2021. - 320 c.
5.	Ватсон, Б. С# 4.0 на примерах (C# 4.0. How-To) / Б. Ватсон. - М.: БХВ-Петербург, 2021. - 608 c.
6.	Гриффитс, Иэн Программирование на C# 5.0 / Иэн Гриффитс. - М.: Эксмо, 2018. - 1679 c.
7.	Гэри, Маклин Холл Адаптивный код на C#. Проектирование классов и интерфейсов, шаблоны и принципы SOLID / Гэри Маклин Холл. - М.: Вильямс, 2021. - 432 c.
8.	Дейтел, П. Как программировать на Visual C# 2012 / П. Дейтел. - М.: Питер, 2018. - 2180 c.
9.	Джон, Скит C#. Программирование для профессионалов / Скит Джон. - М.: Диалектика / Вильямс, 2017. - 2530 c.
10.	Климов, А. C#. Советы программистам / А. Климов. - М.: БХВ-Петербург, 2018. - 544 c.
11.	Культин, Н. С# в задачах и примерах / Н. Культин. - М.: БХВ-Петербург, 2020. - 1293 c.
12.	Лотка, Р. C# и CSLA .NET Framework. Разработка бизнес-объектов / Р. Лотка. - М.: Диалектика / Вильямс, 2017. - 555 c.
13.	Майо, Джо C#Builder. Быстрый старт (+ дискета) / Джо Майо. - М.: Бином-Пресс, 2021. - 384 c.
14.	Мэтью, Мак-Дональд WPF: Windows Presentation Foundation в .NET 4.5 с примерами на C# 5.0 для профессионалов / Мак-Дональд Мэтью. - М.: Диалектика / Вильямс, 2017. - 1100 c.
15.	Нейгел, Кристиан C# 5.0 и платформа .NET 4.5 для профессионалов / Кристиан Нейгел и др. - М.: Вильямс, 2020. - 1440 c.
16.	Пахомов, Борис С# для начинающих / Борис Пахомов. - М.: БХВ-Петербург, 2017. - 2271 c.
17.	Петцольд, Чарльз Эспозито Д. Программирование для Microsoft Windows 8. Разработка приложений для Windows 8 на HTML5 и JavaScript (комплект из 2 книг) / Петцольд Чарльз, Эспозито Д., Ф. Эспозито. - М.: Питер, 2021. - 492 c.
18.	Прайс, Джейсон Visual C# 2.0. Полное руководство / Джейсон Прайс, Майк Гандэрлой. - М.: Век +, Корона-Век, Энтроп, 2019. - 736 c.
19.	Сафонов, В. О. Параметризованные типы данных. История, теория, реализация и применение / В.О. Сафонов. - М.: Издательство Санкт-Петербургского университета, 2020. - 116 c.
20.	Секунов, Н. Самоучитель C# / Н. Секунов. - М.: БХВ-Петербург, 2017. - 576 c.
21.	Сфер, Чак C# 2008 для "чайников" / Чак Сфер, Стефан Рэнди Дэвис, Чак Сфер. - М.: Вильямс, 2020. - 592 c.
22.	Фленов, Михаил Библия C# / Михаил Фленов. - М.: БХВ-Петербург, 2021. - 560 c.
23.	Шилдт, Герберт C# 2.0. Полное руководство / Герберт Шилдт. - М.: ЭКОМ Паблишерз, 2017. - 976 c.

это пример текстовика для дипломной работы 
опиши главные темы так, чтобы я мог отправить код своей программы ИИ и он смог напечатать что-то похожее